/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.LoginInterface;
import hr.algebra.dal.sql.DataSourceSingleton;
import hr.algebra.model.User;
import hr.algebra.utilities.MessageUtils;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sql.DataSource;

/**
 *
 * @author Kizo
 */
public class MovieManager extends javax.swing.JFrame implements LoginInterface {

    private static final String ADMIN = "Admin";
    private static final String USER = "User";
    private static final String LOGIN = "Login";
    private static final String REGISTER = "Register";
    private static final String CREATE_ADMIN = "{ CALL CreateAdmin }";

    /**
     * Creates new form MovieManager
     */
    public MovieManager() {
        initComponents();
        init();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tpContent = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        mOptions = new javax.swing.JMenu();
        miAbout = new javax.swing.JMenuItem();
        miLogOut = new javax.swing.JMenuItem();
        miExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mOptions.setText("Options");

        miAbout.setText("About");
        miAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAboutActionPerformed(evt);
            }
        });
        mOptions.add(miAbout);

        miLogOut.setText("Log Out");
        miLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miLogOutActionPerformed(evt);
            }
        });
        mOptions.add(miLogOut);

        miExit.setText("Exit");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        mOptions.add(miExit);

        jMenuBar1.add(mOptions);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpContent, javax.swing.GroupLayout.DEFAULT_SIZE, 1600, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpContent, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1197, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void miAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAboutActionPerformed
        MessageUtils.showInformationMessage("About", "Movie Manager App by kizo v 1.0");
    }//GEN-LAST:event_miAboutActionPerformed

    private void miLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miLogOutActionPerformed
        userLogOut();
    }//GEN-LAST:event_miLogOutActionPerformed

    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
        dispose();
    }//GEN-LAST:event_miExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MovieManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MovieManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MovieManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MovieManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MovieManager().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu mOptions;
    private javax.swing.JMenuItem miAbout;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenuItem miLogOut;
    private javax.swing.JTabbedPane tpContent;
    // End of variables declaration//GEN-END:variables

    private LoginPanel loginPanel;
    private RegisterPanel registerPanel;
    private UserPanel userPanel;
    private AdminPanel adminPanel;
    private User logedUser = new User();

    private void init() {
        configurePanels();
        createAdmin();
    }

    private void configurePanels() {

        loginPanel = new LoginPanel();
        registerPanel = new RegisterPanel();

        loginPanel.addLoginInterface(this);
        registerPanel.addLoginInterface(this);

        tpContent.add(LOGIN, loginPanel);
        tpContent.add(REGISTER, registerPanel);
    }

    @Override
    public void userLogIn(User user) {
        logedUser = user;
        
        if (user.getAccountTypeId() == 2) {
            callUserPanel();
            userPanel.setUser(logedUser);
        } else if (user.getAccountTypeId() == 1) {
            callAdminPanel();
        }
    }

    @Override
    public void userLogOut() {
        logedUser = null;
        callCredentialsPanels();
    }

    
    public void createAdmin() {
        DataSource dataSource = DataSourceSingleton.getInstance();
        try (Connection con = dataSource.getConnection()) {
            // First, check if the admin user already exists
            try (CallableStatement checkAdminStmt = con.prepareCall("SELECT COUNT(*) FROM [User] WHERE AccountTypeID = 1"); ResultSet rs = checkAdminStmt.executeQuery()) {

                if (rs.next() && rs.getInt(1) == 0) {
                    // If admin doesn't exist, insert the 'admin' AccountType if needed
                    try (PreparedStatement insertAccountTypeStmt = con.prepareStatement("INSERT INTO AccountType (Type) VALUES ('admin')")) {
                        insertAccountTypeStmt.executeUpdate();
                    }

                    // Now execute the stored procedure to insert the admin user
                    try (CallableStatement createAdminStmt = con.prepareCall(CREATE_ADMIN)) {
                        createAdminStmt.execute();
                    }
                }
            }
            try (PreparedStatement checkUserAccountTypeStmt = con.prepareStatement("SELECT COUNT(*) FROM AccountType WHERE Type = 'user'"); ResultSet userAccountTypeRs = checkUserAccountTypeStmt.executeQuery()) {

                if (userAccountTypeRs.next() && userAccountTypeRs.getInt(1) == 0) {
                    // If 'user' AccountType doesn't exist, insert it
                    try (PreparedStatement insertUserAccountTypeStmt = con.prepareStatement("INSERT INTO AccountType (Type) VALUES ('user')")) {
                        insertUserAccountTypeStmt.executeUpdate();
                    }
                }
            }

        } catch (SQLException e) {
            Logger.getLogger(MovieManager.class.getName()).log(Level.SEVERE, null, e);
            MessageUtils.showErrorMessage("Error", "Can't create admin");
        }
    }

    private void callUserPanel() {
        tpContent.remove(loginPanel);
        tpContent.remove(registerPanel);
        userPanel = new UserPanel();
        
        tpContent.add(USER, userPanel);

        //System.out.println(logedUser.getId());
    }

    private void callAdminPanel() {
        tpContent.remove(loginPanel);
        tpContent.remove(registerPanel);
        adminPanel = new AdminPanel();
        tpContent.add(ADMIN, adminPanel);
    }

    private void callCredentialsPanels() {
        tpContent.remove(adminPanel);
        tpContent.remove(userPanel);

        if (loginPanel == null && registerPanel==null) {
            loginPanel = new LoginPanel();
            registerPanel = new RegisterPanel();
        }

        loginPanel.addLoginInterface(this);
        registerPanel.addLoginInterface(this);

        tpContent.add(LOGIN, loginPanel);
        tpContent.add(REGISTER, registerPanel);

        /*if (userPanel != null) {
        userPanel.setUser(null); // Reset the user when logging out
        }*/
    }

}
