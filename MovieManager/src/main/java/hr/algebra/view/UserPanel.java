/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Genre;
import hr.algebra.model.Movie;
import hr.algebra.model.MovieCollection;
import hr.algebra.model.MovieCrewMember;
import hr.algebra.model.MovieGenreRelation;
import hr.algebra.model.MovieTransferable;
import hr.algebra.model.MovieWatched;
import hr.algebra.model.Person;
import hr.algebra.model.Role;
import hr.algebra.model.User;
import hr.algebra.utilities.FileUtils;
import hr.algebra.utilities.IconUtils;
import hr.algebra.utilities.JAXBUtils;
import hr.algebra.utilities.MessageUtils;
import hr.algebra.view.model.MoviesTableModel;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import javax.swing.text.JTextComponent;
import javax.xml.bind.JAXBException;

/**
 *
 * @author Kizo
 */
public class UserPanel extends javax.swing.JPanel {

    private static final String DIR = "assets";

    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;
    private Repository movieRepository;
    private Repository genreRepository;
    private Repository movieGenreRelationRepository;
    private Repository movieCrewMemberRepository;
    private Repository personRepository;
    private Repository roleRepository;
    private Repository movieWatchedRepository;
    private List<Movie> movieList = new ArrayList<>();
    private List<Movie> watchedMovies = new ArrayList<>();
    private DefaultListModel<Movie> moviesListModel;
    private DefaultListModel<Movie> watchedListModel;
    private User user;

    private MoviesTableModel movieTableModel;
    private static final String FILENAME = "src/main/resources/moviecollection.xml";
    private Movie selectedMovie;

    /**
     * Creates new form AdminPanel
     */
    public UserPanel() {
        initComponents();
        //init();
        initDragNDrop();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfOriginalTitle = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tfPubDate = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tfLink = new javax.swing.JTextField();
        tfYear = new javax.swing.JTextField();
        tfDuration = new javax.swing.JTextField();
        lbIcon = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        tfPath = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        tfReservation = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        btnUpdateMovie = new javax.swing.JButton();
        btnAddMovie = new javax.swing.JButton();
        btnDeleteMovie = new javax.swing.JButton();
        btnChoose = new javax.swing.JButton();
        lbOriginalTitleError = new javax.swing.JLabel();
        lbTitleError = new javax.swing.JLabel();
        lbPubDateError = new javax.swing.JLabel();
        lbYearError = new javax.swing.JLabel();
        lbLinkeError = new javax.swing.JLabel();
        lbDescError = new javax.swing.JLabel();
        lbReservationError = new javax.swing.JLabel();
        lbPathError = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        taDesc = new javax.swing.JTextArea();
        tfPerformances = new javax.swing.JTextField();
        lbDispDateError = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        tfDispDate = new javax.swing.JTextField();
        lbPerfrormancesError = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        tfTrailerLink = new javax.swing.JTextField();
        lbGenreError = new javax.swing.JLabel();
        tfGenre = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        lbTrailerError = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jScrollPane7 = new javax.swing.JScrollPane();
        lsMovies = new javax.swing.JList<>();
        jScrollPane8 = new javax.swing.JScrollPane();
        jScrollPane9 = new javax.swing.JScrollPane();
        lsWatchedMovies = new javax.swing.JList<>();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        lbDurationError = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbMovies = new javax.swing.JTable();
        tfActors = new javax.swing.JTextField();
        tfDirectors = new javax.swing.JTextField();
        JLabelDirectors = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lbActorsError = new javax.swing.JLabel();
        lbDirectorsError = new javax.swing.JLabel();
        lbPosterError = new javax.swing.JLabel();
        btnDeleteWatched = new javax.swing.JButton();
        btnSaveWatched = new javax.swing.JButton();
        btnExportXml = new javax.swing.JButton();
        lbLoading = new javax.swing.JLabel();
        lbWelcome = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        btnClearForm = new javax.swing.JButton();

        jLabel7.setText("jLabel1");

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText("Title");

        jLabel2.setText("Original title");

        jLabel3.setText("Published date");

        jLabel4.setText("Description");

        jLabel5.setText("Link");

        lbIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/no_image.png"))); // NOI18N

        jLabel9.setText("Duration (min)");

        jLabel11.setText("Year");

        tfPath.setEditable(false);

        jLabel13.setText("Picture path");

        jLabel14.setText("Reservation");

        btnUpdateMovie.setText("Update movie");
        btnUpdateMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateMovieActionPerformed(evt);
            }
        });

        btnAddMovie.setBackground(new java.awt.Color(51, 255, 51));
        btnAddMovie.setForeground(new java.awt.Color(0, 0, 0));
        btnAddMovie.setText("Add movie");
        btnAddMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMovieActionPerformed(evt);
            }
        });

        btnDeleteMovie.setForeground(new java.awt.Color(255, 51, 51));
        btnDeleteMovie.setText("Delete movie");
        btnDeleteMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteMovieActionPerformed(evt);
            }
        });

        btnChoose.setText("Choose");
        btnChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseActionPerformed(evt);
            }
        });

        lbOriginalTitleError.setForeground(new java.awt.Color(255, 51, 0));
        lbOriginalTitleError.setText("X");

        lbTitleError.setForeground(new java.awt.Color(255, 51, 0));
        lbTitleError.setText("X");

        lbPubDateError.setForeground(new java.awt.Color(255, 51, 0));
        lbPubDateError.setText("X");

        lbYearError.setForeground(new java.awt.Color(255, 51, 0));
        lbYearError.setText("X");

        lbLinkeError.setForeground(new java.awt.Color(255, 51, 0));
        lbLinkeError.setText("X");

        lbDescError.setForeground(new java.awt.Color(255, 51, 0));
        lbDescError.setText("X");

        lbReservationError.setForeground(new java.awt.Color(255, 51, 0));
        lbReservationError.setText("X");

        lbPathError.setForeground(new java.awt.Color(255, 51, 0));
        lbPathError.setText("X");

        jLabel24.setText("Performances");

        taDesc.setColumns(20);
        taDesc.setRows(5);
        jScrollPane3.setViewportView(taDesc);

        lbDispDateError.setForeground(new java.awt.Color(255, 51, 0));
        lbDispDateError.setText("X");

        jLabel26.setText("Display date:");

        lbPerfrormancesError.setForeground(new java.awt.Color(255, 51, 0));
        lbPerfrormancesError.setText("X");

        jLabel28.setText("Trailer");

        lbGenreError.setForeground(new java.awt.Color(255, 51, 0));
        lbGenreError.setText("X");

        jLabel29.setText("Genre");

        lbTrailerError.setForeground(new java.awt.Color(255, 51, 0));
        lbTrailerError.setText("X");

        jScrollPane7.setViewportView(lsMovies);

        jScrollPane6.setViewportView(jScrollPane7);

        jScrollPane9.setViewportView(lsWatchedMovies);

        jScrollPane8.setViewportView(jScrollPane9);

        jLabel31.setText("Already watched");

        jLabel32.setText("All movies");

        lbDurationError.setForeground(new java.awt.Color(255, 51, 0));
        lbDurationError.setText("X");

        tbMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tbMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMoviesMouseClicked(evt);
            }
        });
        tbMovies.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbMoviesKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbMovies);

        JLabelDirectors.setText("Directors");

        jLabel6.setText("Actors");

        lbActorsError.setForeground(new java.awt.Color(255, 51, 0));
        lbActorsError.setText("X");

        lbDirectorsError.setForeground(new java.awt.Color(255, 51, 0));
        lbDirectorsError.setText("X");

        lbPosterError.setForeground(new java.awt.Color(255, 51, 0));
        lbPosterError.setText("X");

        btnDeleteWatched.setText("Delete");
        btnDeleteWatched.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteWatchedActionPerformed(evt);
            }
        });

        btnSaveWatched.setText("Save");
        btnSaveWatched.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveWatchedActionPerformed(evt);
            }
        });

        btnExportXml.setText("Export movies to XML...");
        btnExportXml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportXmlActionPerformed(evt);
            }
        });

        lbLoading.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        lbLoading.setForeground(new java.awt.Color(204, 102, 255));

        lbWelcome.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lbWelcome.setForeground(new java.awt.Color(51, 102, 255));

        jLabel8.setForeground(new java.awt.Color(255, 102, 204));
        jLabel8.setText("v1.0");

        btnClearForm.setBackground(new java.awt.Color(255, 51, 51));
        btnClearForm.setForeground(new java.awt.Color(255, 255, 255));
        btnClearForm.setText("Clear form");
        btnClearForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearFormActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(308, 456, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnChoose)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(JLabelDirectors)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(73, 73, 73)
                                                .addComponent(tfDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lbDirectorsError, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(tfActors, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(lbActorsError, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addComponent(lbIcon)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(lbDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(tfPath, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(9, 9, 9)
                                        .addComponent(lbPosterError, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(lbPathError, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(btnClearForm, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(btnExportXml, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAddMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnDeleteMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnUpdateMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(104, 104, 104))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(tfTrailerLink, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(275, 275, 275)
                                        .addComponent(lbTrailerError, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lbOriginalTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lbDescError, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfPubDate, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lbPubDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lbLinkeError, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfDispDate, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lbDispDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(tfReservation, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lbReservationError, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(tfYear, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(tfGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lbYearError, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lbGenreError, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel24)
                                        .addGap(35, 35, 35)
                                        .addComponent(tfPerformances, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(275, 275, 275)
                                        .addComponent(lbPerfrormancesError, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbLoading, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnSaveWatched, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnDeleteWatched, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(32, 32, 32)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(237, 237, 237)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lbWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(376, 376, 376))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfPath, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbPathError)
                                    .addComponent(lbWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(14, 14, 14)
                                .addComponent(btnChoose))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel8)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane6)
                                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnDeleteWatched)
                                    .addComponent(btnSaveWatched))
                                .addGap(30, 30, 30)
                                .addComponent(lbLoading, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lbPosterError)
                                    .addComponent(lbIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbTitleError))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbOriginalTitleError))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfPubDate, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbPubDateError))
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbDescError)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfDispDate, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbDispDateError))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbLinkeError)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfReservation, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbReservationError))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbYearError)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(tfYear, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbActorsError)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(tfActors, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(JLabelDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbDirectorsError))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbDurationError)
                                    .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbGenreError)
                            .addComponent(btnAddMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDeleteMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdateMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel24))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(tfPerformances, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbPerfrormancesError)
                                .addComponent(btnExportXml, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnClearForm, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfTrailerLink, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbTrailerError))))
                .addGap(49, 76, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMovieActionPerformed
        if (!formValid()) {
            return;
        }
        try {
            // Create Movie
            String localPicturePath = uploadPic();
            Movie movie = new Movie(
                    tfTitle.getText().trim(),
                    LocalDateTime.parse(tfPubDate.getText().trim(), Movie.DATE_FORMATTER),
                    tfOriginalTitle.getText().trim(),
                    taDesc.getText().trim(),
                    Integer.parseInt(tfDuration.getText().trim()),
                    Integer.parseInt(tfYear.getText().trim()),
                    localPicturePath,
                    tfLink.getText().trim(),
                    tfReservation.getText().trim(),
                    LocalDateTime.parse(tfDispDate.getText().trim(), Movie.DATE_FORMATTER),
                    tfPerformances.getText().trim(),
                    tfTrailerLink.getText().trim()
            );

            int movieId = movieRepository.create(movie);

            // Parse Genres and create MovieGenres
            String[] genresStr = tfGenre.getText().trim().split(",");
            for (String genreStr : genresStr) {
                Genre genre = new Genre(genreStr.trim());
                int genreId = genreRepository.create(genre);
                MovieGenreRelation movieGenre = new MovieGenreRelation(movieId, genreId);
                movieGenreRelationRepository.create(movieGenre);
            }

            // Parse Persons and create MoviePersonRoles
            String[] actorsStr = tfActors.getText().trim().split(",");
            String[] directorsStr = tfDirectors.getText().trim().split(",");
            for (String actorStr : actorsStr) {
                Person actor = new Person(actorStr.trim());
                int actorId = personRepository.create(actor);
                MovieCrewMember moviePersonRole = new MovieCrewMember(movieId, actorId, 1);  // 1 is the predefined ID for Actor role
                movieCrewMemberRepository.create(moviePersonRole);
            }
            for (String directorStr : directorsStr) {
                Person director = new Person(directorStr.trim());
                int directorId = personRepository.create(director);
                MovieCrewMember moviePersonRole = new MovieCrewMember(movieId, directorId, 2);  // 2 is the predefined ID for Director role
                movieCrewMemberRepository.create(moviePersonRole);
            }
            movieTableModel.setMovies(getMovies());
            MessageUtils.showInformationMessage("Info", "Successfully added!");

            clearForm();
        } catch (Exception ex) {
            Logger.getLogger(UserPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to create movie!");
        }
    }//GEN-LAST:event_btnAddMovieActionPerformed

    private void btnUpdateMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateMovieActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose movie to update");
            return;
        }
        if (!formValid()) {
            return;
        }
        try {
            // Get the current movie

            //Movie movie = movieRepository.select(selectedMovie.getId());
            if (!tfPath.getText().trim().equals(selectedMovie.getPoster())) {
                if (selectedMovie.getPoster() != null) {
                    Files.deleteIfExists(Paths.get(selectedMovie.getPoster()));
                }
                String localPicturePath = uploadPic();
                selectedMovie.setPoster(localPicturePath);
            }

            // Update Movie
            selectedMovie.setTitle(tfTitle.getText().trim());
            selectedMovie.setPubDate(LocalDateTime.parse(tfPubDate.getText().trim(), Movie.DATE_FORMATTER));
            selectedMovie.setOriginalTitle(tfOriginalTitle.getText().trim());
            selectedMovie.setDescription(taDesc.getText().trim());
            selectedMovie.setDuration(Integer.parseInt(tfDuration.getText().trim()));
            selectedMovie.setYear(Integer.parseInt(tfYear.getText().trim()));
            selectedMovie.setLink(tfLink.getText().trim());
            selectedMovie.setReservation(tfReservation.getText().trim());
            selectedMovie.setDisplayDate(LocalDateTime.parse(tfDispDate.getText().trim(), Movie.DATE_FORMATTER));
            selectedMovie.setPerformances(tfPerformances.getText().trim());
            selectedMovie.setTrailer(tfTrailerLink.getText().trim());

            movieRepository.update(selectedMovie.getId(), selectedMovie);

            // Delete old MovieGenres and MoviePersonRoles
            movieGenreRelationRepository.delete(selectedMovie.getId());
            movieCrewMemberRepository.delete(selectedMovie.getId());

            // Parse Genres and create MovieGenres
            String[] genresStr = tfGenre.getText().trim().split(",");
            for (String genreStr : genresStr) {
                Genre genre = new Genre(genreStr.trim());
                int genreId = genreRepository.create(genre);
                MovieGenreRelation movieGenre = new MovieGenreRelation(selectedMovie.getId(), genreId);
                movieGenreRelationRepository.create(movieGenre);
            }

            // Parse Persons and create Movie crew member
            String[] actorsStr = tfActors.getText().trim().split(",");
            String[] directorsStr = tfDirectors.getText().trim().split(",");
            for (String actorStr : actorsStr) {
                Person actor = new Person(actorStr.trim());
                int actorId = personRepository.create(actor);
                MovieCrewMember moviePersonRole = new MovieCrewMember(selectedMovie.getId(), actorId, 1);  // 1 is the predefined ID for Actor role
                movieCrewMemberRepository.create(moviePersonRole);
            }
            for (String directorStr : directorsStr) {
                Person director = new Person(directorStr.trim());
                int directorId = personRepository.create(director);
                MovieCrewMember moviePersonRole = new MovieCrewMember(selectedMovie.getId(), directorId, 2);  // 2 is the predefined ID for Director role
                movieCrewMemberRepository.create(moviePersonRole);
            }

            movieTableModel.setMovies(getMovies());
            MessageUtils.showInformationMessage("Info", "Successfully updated!");
            clearForm();
        } catch (Exception ex) {
            Logger.getLogger(UserPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to update movie!");
        }
    }//GEN-LAST:event_btnUpdateMovieActionPerformed

    private void btnDeleteMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteMovieActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("No movie selected", "Please choose movie to delete");
            return;
        }
        if (MessageUtils.showConfirmDialog(
                "Delete movie",
                "Do you want to delete selected movie?")) {
            try {
                if (selectedMovie.getPoster() != null) {
                    Files.deleteIfExists(Paths.get(selectedMovie.getPoster()));
                }
                movieRepository.delete(selectedMovie.getId());
                movieTableModel.setMovies(getMovies());

                clearForm();
                MessageUtils.showInformationMessage("Success", "Movie deleted!");
            } catch (Exception ex) {
                Logger.getLogger(UserPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to delete movie!");
            }
        }
    }//GEN-LAST:event_btnDeleteMovieActionPerformed

    private void btnChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseActionPerformed
        Optional<File> fileOptional = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
        if (!fileOptional.isPresent()) {
            return;
        }

        File file = fileOptional.get(); // Extract the actual File object
        tfPath.setText(file.getAbsolutePath());
        setIcon(lbIcon, file);
    }//GEN-LAST:event_btnChooseActionPerformed

    private void tbMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMoviesMouseClicked
        handleGui(true);
        new Thread(() -> {
            showMovie();
        }).start();
        //showMovie();
    }//GEN-LAST:event_tbMoviesMouseClicked

    private void tbMoviesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbMoviesKeyReleased
        handleGui(true);
        new Thread(() -> {
            showMovie();
        }).start();
        //showMovie();
    }//GEN-LAST:event_tbMoviesKeyReleased

    private void btnSaveWatchedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveWatchedActionPerformed

        List<MovieWatched> watchMov = new ArrayList<>();
        for (Movie movie : watchedMovies) {
            watchMov.add(new MovieWatched(movie.getId(), user.getId()));

        }
        if (watchMov.isEmpty()) {
            MessageUtils.showInformationMessage("Info", "No watched movies, add movies to watched list.");
            return;
        }
        try {
            movieWatchedRepository.createList(watchMov);
            MessageUtils.showInformationMessage("Info", "Saved");
        } catch (Exception ex) {
            Logger.getLogger(UserPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSaveWatchedActionPerformed

    private void btnDeleteWatchedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteWatchedActionPerformed
        List<MovieWatched> favMovies = new ArrayList<>();
        try {
            favMovies = getWatchedMovie();
        } catch (Exception ex) {
            Logger.getLogger(UserPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (favMovies.isEmpty()) {
            MessageUtils.showInformationMessage("Info", "No watched movies to delete!");
            return;
        }

        for (MovieWatched favMovie : favMovies) {
            try {
                movieWatchedRepository.delete(favMovie.getMovieWatchedId());

            } catch (Exception ex) {
                Logger.getLogger(UserPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        watchedMovies.clear();
        watchedListModel.clear();
        MessageUtils.showInformationMessage("Info", "Wathced movies succesfully deleted");
    }//GEN-LAST:event_btnDeleteWatchedActionPerformed

    private void btnExportXmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportXmlActionPerformed
        List<Movie> movies = getMovies();
        MovieCollection movieCollection = new MovieCollection(movies);
        try {
            JAXBUtils.save(movieCollection, FILENAME);
            MessageUtils.showInformationMessage("Info", "Collection successfully exported to: " + FILENAME);
        } catch (JAXBException ex) {
            Logger.getLogger(UserPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnExportXmlActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void btnClearFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearFormActionPerformed
        clearForm();
    }//GEN-LAST:event_btnClearFormActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JLabelDirectors;
    private javax.swing.JButton btnAddMovie;
    private javax.swing.JButton btnChoose;
    private javax.swing.JButton btnClearForm;
    private javax.swing.JButton btnDeleteMovie;
    private javax.swing.JButton btnDeleteWatched;
    private javax.swing.JButton btnExportXml;
    private javax.swing.JButton btnSaveWatched;
    private javax.swing.JButton btnUpdateMovie;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel lbActorsError;
    private javax.swing.JLabel lbDescError;
    private javax.swing.JLabel lbDirectorsError;
    private javax.swing.JLabel lbDispDateError;
    private javax.swing.JLabel lbDurationError;
    private javax.swing.JLabel lbGenreError;
    private javax.swing.JLabel lbIcon;
    private javax.swing.JLabel lbLinkeError;
    private javax.swing.JLabel lbLoading;
    private javax.swing.JLabel lbOriginalTitleError;
    private javax.swing.JLabel lbPathError;
    private javax.swing.JLabel lbPerfrormancesError;
    private javax.swing.JLabel lbPosterError;
    private javax.swing.JLabel lbPubDateError;
    private javax.swing.JLabel lbReservationError;
    private javax.swing.JLabel lbTitleError;
    private javax.swing.JLabel lbTrailerError;
    private javax.swing.JLabel lbWelcome;
    private javax.swing.JLabel lbYearError;
    private javax.swing.JList<Movie> lsMovies;
    private javax.swing.JList<Movie> lsWatchedMovies;
    private javax.swing.JTextArea taDesc;
    private javax.swing.JTable tbMovies;
    private javax.swing.JTextField tfActors;
    private javax.swing.JTextField tfDirectors;
    private javax.swing.JTextField tfDispDate;
    private javax.swing.JTextField tfDuration;
    private javax.swing.JTextField tfGenre;
    private javax.swing.JTextField tfLink;
    private javax.swing.JTextField tfOriginalTitle;
    private javax.swing.JTextField tfPath;
    private javax.swing.JTextField tfPerformances;
    private javax.swing.JTextField tfPubDate;
    private javax.swing.JTextField tfReservation;
    private javax.swing.JTextField tfTitle;
    private javax.swing.JTextField tfTrailerLink;
    private javax.swing.JTextField tfYear;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {

            //System.out.println(user.getId());
            initRepository();
            moviesListModel = new DefaultListModel<>();
            watchedListModel = new DefaultListModel<>();

            initValidation();
            hideErrors();
            initTable();
            loadMovieListModel();
            loadWatchedMoviesModel();
            welcomeUser();

        } catch (Exception ex) {
            Logger.getLogger(UserPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
            System.exit(1);
        }
    }

    public void setUser(User user) {
        this.user = user;

    }

    private void initValidation() {
        validationFields = Arrays.asList(
                tfTitle,
                tfOriginalTitle,
                tfPubDate,
                tfLink,
                tfPerformances,
                taDesc,
                tfPubDate,
                tfDispDate,
                tfTrailerLink,
                tfYear,
                tfDuration,
                tfPath,
                tfGenre,
                tfActors,
                tfDirectors,
                tfReservation
        );
        errorLabels = Arrays.asList(
                lbTitleError,
                lbOriginalTitleError,
                lbPubDateError,
                lbLinkeError,
                lbPerfrormancesError,
                lbDescError,
                lbPubDateError,
                lbDispDateError,
                lbTrailerError,
                lbYearError,
                lbDurationError,
                lbPathError,
                lbGenreError,
                lbActorsError,
                lbDirectorsError,
                lbPosterError,
                lbReservationError
        );
    }

    private void hideErrors() {
        errorLabels.forEach(e -> e.setVisible(false));
    }

    private void initRepository() {
        movieRepository = RepositoryFactory.getRepository(RepositoryFactory.RepositoryType.MOVIE);
        movieWatchedRepository = RepositoryFactory.getRepository(RepositoryFactory.RepositoryType.WATCHED_MOVIE);
        genreRepository = RepositoryFactory.getRepository(RepositoryFactory.RepositoryType.GENRE);
        movieGenreRelationRepository = RepositoryFactory.getRepository(RepositoryFactory.RepositoryType.MOVIE_GENRE);
        movieCrewMemberRepository = RepositoryFactory.getRepository(RepositoryFactory.RepositoryType.MOVIE_CREW);
        personRepository = RepositoryFactory.getRepository(RepositoryFactory.RepositoryType.PERSON);
        roleRepository = RepositoryFactory.getRepository(RepositoryFactory.RepositoryType.ROLE);

    }

    private void initTable() {
        tbMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbMovies.setAutoCreateRowSorter(true);
        tbMovies.setRowHeight(25);
        movieTableModel = new MoviesTableModel(getMovies());
        tbMovies.setModel(movieTableModel);
        tbMovies.revalidate();
        tbMovies.repaint();
    }

    private List<Movie> getMovies() {
        List<Movie> movies = new ArrayList<>();

        try {
            movies = movieRepository.selectAll();
            List<MovieGenreRelation> allMovieGenres = movieGenreRelationRepository.selectAll();
            List<MovieCrewMember> allCrewMembers = movieCrewMemberRepository.selectAll();
            List<Person> allPersons = personRepository.selectAll();
            List<Role> allRoles = roleRepository.selectAll();

            for (Movie movie : movies) {
                List<Genre> genres = new ArrayList<>();
                for (MovieGenreRelation movieGenre : allMovieGenres) {
                    if (movieGenre.getMovieId() == movie.getId()) {
                        Optional<Genre> genre = genreRepository.select(movieGenre.getGenreId());
                        if (genre.isPresent()) {
                            genres.add(genre.get());
                        }
                    }
                }
                movie.setGenres(genres);

                List<Person> directors = new ArrayList<>();
                List<Person> actors = new ArrayList<>();
                for (MovieCrewMember movieCrewMember : allCrewMembers) {
                    if (movieCrewMember.getMovieId() == movie.getId()) {
                        Person relatedPerson = allPersons.stream().filter(person -> person.getId() == movieCrewMember.getPersonId()).findFirst().orElse(null);
                        Role relatedRole = allRoles.stream().filter(role -> role.getId() == movieCrewMember.getRoleId()).findFirst().orElse(null);

                        if (relatedPerson != null && relatedRole != null) {
                            if (relatedRole.getRole().equalsIgnoreCase("Director")) {
                                directors.add(relatedPerson);
                            } else if (relatedRole.getRole().equalsIgnoreCase("Actor")) {
                                actors.add(relatedPerson);
                            }
                        }
                    }
                }
                movie.setDirectors(directors);
                movie.setActors(actors);
            }
        } catch (Exception ex) {
            Logger.getLogger(UserPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        return movies;
    }

    private boolean formValid() {
        hideErrors();
        boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setVisible(validationFields.get(i).getText().trim().isEmpty());

            if ("Date".equals(validationFields.get(i).getName())) {
                try {
                    LocalDateTime.parse(validationFields.get(i).getText().trim(), Movie.DATE_FORMATTER);
                } catch (Exception e) {
                    ok = false;
                    errorLabels.get(i).setVisible(true);
                }
            }
            if ("Number".equals(validationFields.get(i).getName())) {
                try {
                    Integer.valueOf(validationFields.get(i).getText().trim());
                } catch (NumberFormatException e) {
                    ok = false;
                    errorLabels.get(i).setVisible(true);
                }
            }

        }
        return ok;
    }

    private void clearForm() {
        hideErrors();
        validationFields.forEach(e -> e.setText(""));
        lbIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/no_image.png")));
        selectedMovie = null;
    }

    private String uploadPic() throws IOException {
        String picturePath = tfPath.getText();
        String ext = picturePath.substring(picturePath.lastIndexOf("."));
        String pictureName = UUID.randomUUID() + ext;
        String localPicturePath = DIR + File.separator + pictureName;

        FileUtils.copy(picturePath, localPicturePath);
        return localPicturePath;
    }

    private void setIcon(JLabel label, File file) {
        try {
            label.setIcon(IconUtils.createIcon(file, label.getWidth(), label.getHeight()));
        } catch (IOException ex) {
            Logger.getLogger(UserPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to set icon!");
        }
    }

    private void showMovie() {
        clearForm();
        int selectedRow = tbMovies.getSelectedRow();
        int rowIndex = tbMovies.convertRowIndexToModel(selectedRow);
        int selectedMovieId = (int) movieTableModel.getValueAt(rowIndex, 0);

        try {
            List<MovieGenreRelation> movieGenres = movieGenreRelationRepository.selectAll();
            List<MovieCrewMember> movieCrewMembers = movieCrewMemberRepository.selectAll();
            Optional<Movie> optMovie = movieRepository.select(selectedMovieId);
            List<Genre> genres = new ArrayList<>();
            for (MovieGenreRelation movieGenre : movieGenres) {
                Optional<Genre> genre = genreRepository.select(movieGenre.getGenreId());
                if (genre.isPresent()) {
                    if (movieGenre.getMovieId() == selectedMovieId) {
                        genres.add(genre.get());
                    }
                }
            }

            if (optMovie.isPresent()) {
                selectedMovie = optMovie.get();
                List<Person> actors = new ArrayList<>();
                List<Person> directors = new ArrayList<>();
                for (MovieCrewMember movieCrewMember : movieCrewMembers) {
                    Optional<Person> person = personRepository.select(movieCrewMember.getPersonId());

                    if (person.isPresent()) {
                        if (movieCrewMember.getRoleId() == 1 && movieCrewMember.getMovieId() == selectedMovieId) {
                            actors.add(person.get());
                        } else if (movieCrewMember.getRoleId() == 2 && movieCrewMember.getMovieId() == selectedMovieId) {
                            directors.add(person.get());
                        }
                    }
                }

                java.awt.EventQueue.invokeLater(() -> {
                    
                    handleGui(false);
                    fillForm(selectedMovie, genres, actors, directors);

                });

                //fillForm(selectedMovie, genres, actors, directors);
            }
        } catch (Exception ex) {
            Logger.getLogger(UserPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to show movie!");
        }
    }

    private void fillForm(Movie movie, List<Genre> genres, List<Person> actors, List<Person> directors) {
        if (movie.getPoster() != null && Files.exists(Paths.get(movie.getPoster()))) {
            tfPath.setText(movie.getPoster());
            setIcon(lbIcon, new File(movie.getPoster()));
        }
        tfTitle.setText(movie.getTitle());
        tfPubDate.setText(movie.getPubDate().format(Movie.DATE_FORMATTER));
        tfOriginalTitle.setText(movie.getOriginalTitle());
        taDesc.setText(movie.getDescription());
        tfDuration.setText(String.valueOf(movie.getDuration()));
        tfYear.setText(String.valueOf(movie.getYear()));
        tfLink.setText(movie.getLink());
        tfReservation.setText(movie.getReservation());
        tfDispDate.setText(movie.getDisplayDate().format(Movie.DATE_FORMATTER));
        tfTrailerLink.setText(movie.getTrailer());
        tfPerformances.setText(movie.getPerformances());
        tfGenre.setText(genres.stream().map(Object::toString).collect(Collectors.joining(", ")));
        tfActors.setText(actors.stream().map(Object::toString).collect(Collectors.joining(", ")));
        tfDirectors.setText(directors.stream().map(Object::toString).collect(Collectors.joining(", ")));

    }

    private void initDragNDrop() {
        lsMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsMovies.setDragEnabled(true);
        lsMovies.setTransferHandler(new ExportHandler());

        lsWatchedMovies.setDropMode(DropMode.ON);
        lsWatchedMovies.setTransferHandler(new ImportHandler());
    }

    private void loadMovieListModel() throws Exception {
        movieList = movieRepository.selectAll();
        moviesListModel.clear();
        movieList.forEach(moviesListModel::addElement);
        lsMovies.setModel(moviesListModel);
    }

    private void handleGui(boolean loading) {
        
        btnAddMovie.setEnabled(!loading);
        btnChoose.setEnabled(!loading);
        btnDeleteMovie.setEnabled(!loading);
        btnUpdateMovie.setEnabled(!loading);
        btnExportXml.setEnabled(!loading);
        btnSaveWatched.setEnabled(!loading);
        btnDeleteWatched.setEnabled(!loading);
        btnClearForm.setEnabled(!loading);
       
        
        if (loading) {
            lbLoading.setText("Loading...");
            for (JTextComponent validationField : validationFields) {
                validationField.setEditable(false);
            }
        }
        else{
            lbLoading.setText("");
            for (JTextComponent validationField : validationFields) {
                validationField.setEditable(true);
            }
        }
        
    }

    private void welcomeUser() {
        lbWelcome.setText("Welcome "+user.getUsername()+" !");
    }

    private class ExportHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new MovieTransferable(lsMovies.getSelectedValue());
        }

    }

    private class ImportHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferSupport support) {
            return support.isDataFlavorSupported(MovieTransferable.MOVIE_FLAVOR);
        }

        @Override
        public boolean importData(TransferSupport support) {

            try {
                Movie movie = (Movie) support
                        .getTransferable()
                        .getTransferData(MovieTransferable.MOVIE_FLAVOR);
                if (!watchedMovies.contains(movie)) {
                    watchedMovies.add(movie);
                    loadDropedItemsModel();
                    return true;
                }

            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(UserPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(UserPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

            return false;

        }

    }

    private void loadWatchedMoviesModel() throws Exception {
        List<MovieWatched> watchedMovies = getWatchedMovie();
        List<Movie> movies = new ArrayList<>();
        for (MovieWatched watchedMovie : watchedMovies) {
            Optional<Movie> movie = movieRepository.select(watchedMovie.getMovieId());
            if (movie.isPresent()) {
                movies.add(movie.get());

            }

        }

        watchedListModel.clear();
        movies.forEach(watchedListModel::addElement);
        lsWatchedMovies.setModel(watchedListModel);
    }

    private List<MovieWatched> getWatchedMovie() throws Exception {
        List<MovieWatched> favMovies = movieWatchedRepository.selectAll();
        return favMovies.stream()
                .filter(movie -> movie.getUserId() == user.getId())
                .collect(Collectors.toList());
    }

    private void loadDropedItemsModel() {
        for (Movie movie : watchedMovies) {
            if (!watchedListModel.contains(movie)) {
                watchedListModel.addElement(movie);
            }
        }

        lsWatchedMovies.setModel(watchedListModel);
    }

}
