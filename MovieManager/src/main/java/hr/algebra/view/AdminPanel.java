/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.dal.SqlInterface;
import hr.algebra.model.Genre;
import hr.algebra.model.Movie;
import hr.algebra.model.MovieCrewMember;
import hr.algebra.model.MovieGenreRelation;
import hr.algebra.model.Person;
import hr.algebra.parsers.CinestarRssParser;
import hr.algebra.utilities.MessageUtils;
import java.io.File;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/**
 *
 * @author Kizo
 */
public class AdminPanel extends javax.swing.JPanel {

    /**
     * Creates new form AdminPanel
     */
    public AdminPanel() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbLoading = new javax.swing.JLabel();
        btnClearDb = new javax.swing.JButton();
        btnUpload = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lsMovies = new javax.swing.JList<>();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        lbLoading.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/no_image.png"))); // NOI18N
        lbLoading.setText("jLabel1");

        btnClearDb.setBackground(new java.awt.Color(255, 51, 0));
        btnClearDb.setText("Clear database");
        btnClearDb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearDbActionPerformed(evt);
            }
        });

        btnUpload.setBackground(new java.awt.Color(51, 255, 51));
        btnUpload.setForeground(new java.awt.Color(0, 0, 0));
        btnUpload.setText("Upload movies");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(lsMovies);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(298, 298, 298)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnClearDb, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(135, 135, 135))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbLoading, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(86, 86, 86)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 721, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(255, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 693, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(lbLoading, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(93, 93, 93)
                        .addComponent(btnUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(120, 120, 120)
                        .addComponent(btnClearDb, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(461, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed

        handleGui(true);

        new Thread(() -> {

            try {

                List<Movie> uploadedMovies = CinestarRssParser.parse();
                movieRepository.createList(uploadedMovies);
                List<Movie> movies = movieRepository.selectAll();

                for (Movie movie : movies) {

                    for (Movie uploadMovie : uploadedMovies) {
                        // System.out.println("Comparing movie titles: " + movie.getTitle() + " vs " + uploadMovie.getTitle());
                        if (movie.getTitle().equals(uploadMovie.getTitle())) {
                            // System.out.println("Titles matched: " + movie.getTitle());
                            //var genreTest = uploadMovie.getGenres();
                            //System.out.println("Test genre:" + genreTest);
                            movie.setGenres(uploadMovie.getGenres());
                            movie.setActors(uploadMovie.getActors());
                            movie.setDirectors(uploadMovie.getDirectors());

                        }
                    }
                }

                for (Movie movie : movies) {

                    for (Person actor : movie.getActors()) {
                        int actorId = personRepository.create(actor);
                        MovieCrewMember movieCrewMember = new MovieCrewMember(movie.getId(), actorId, 1);
                        movieCrewMemberRepository.create(movieCrewMember);
                    }
                    for (Person director : movie.getDirectors()) {
                        int directorId = personRepository.create(director);
                        MovieCrewMember movieCrewMember = new MovieCrewMember(movie.getId(), directorId, 2);
                        movieCrewMemberRepository.create(movieCrewMember);
                    }
                    for (Genre genre : movie.getGenres()) {
                        int genreId = genreRepository.create(genre);
                        MovieGenreRelation movieGenre = new MovieGenreRelation(movie.getId(), genreId);
                        movieGenreRelationRepository.create(movieGenre);
                    }

                }

                java.awt.EventQueue.invokeLater(() -> {

                    handleGui(false); // Set the uploading state to false
                    try {
                        loadModel(); // Update the table model
                    } catch (Exception ex) {
                        Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }

                });

                //loadModel();
            } catch (Exception ex) {
                Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Unrecoverable error", "Unable to upload movies");
                System.exit(1);
            }
        }).start();


    }//GEN-LAST:event_btnUploadActionPerformed

    private void btnClearDbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearDbActionPerformed
        sqlInterface.clearDatabase();
        try {
            loadModel();
        } catch (Exception ex) {
            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        deleteDir(new File(DIR));
    }//GEN-LAST:event_btnClearDbActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearDb;
    private javax.swing.JButton btnUpload;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbLoading;
    private javax.swing.JList<Movie> lsMovies;
    // End of variables declaration//GEN-END:variables

    private static final String DIR = "assets";
    private DefaultListModel<Movie> moviesListModel;
    private Repository movieRepository;
    private Repository genreRepository;
    private Repository personRepository;
    private Repository movieCrewMemberRepository;
    private Repository movieGenreRelationRepository;
    private SqlInterface sqlInterface;

    private void init() {

        try {
            movieRepository = RepositoryFactory.getRepository(RepositoryFactory.RepositoryType.MOVIE);
            genreRepository = RepositoryFactory.getRepository(RepositoryFactory.RepositoryType.GENRE);
            personRepository = RepositoryFactory.getRepository(RepositoryFactory.RepositoryType.PERSON);
            movieGenreRelationRepository = RepositoryFactory.getRepository(RepositoryFactory.RepositoryType.MOVIE_GENRE);
            movieCrewMemberRepository = RepositoryFactory.getRepository(RepositoryFactory.RepositoryType.MOVIE_CREW);
            sqlInterface = RepositoryFactory.getSqlRepository(RepositoryFactory.SqlRepositoryType.DB);

            moviesListModel = new DefaultListModel<>();
            loadModel();
        } catch (Exception exception) {
            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, exception);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
            System.exit(1);
        }

    }

    private void loadModel() throws Exception {

        List<Movie> movies = movieRepository.selectAll();
        moviesListModel.clear();
        movies.forEach(moviesListModel::addElement);
        lsMovies.setModel(moviesListModel);

    }

    private void deleteDir(File file) {
        File[] content = file.listFiles();
        if (content != null) {
            for (File f : content) {
                deleteDir(f);
            }
        }
        file.delete();
    }

    private void handleGui(boolean uploading) {
        btnUpload.setEnabled(!uploading);
        if (uploading) {
            lbLoading.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/loading_icon.gif")));
        } else {
            lbLoading.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/no_image.png")));
        }
    }

}
